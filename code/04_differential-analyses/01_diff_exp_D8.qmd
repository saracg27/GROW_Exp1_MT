---
title: "01_differential-expression_D8"
format: html
author: Sara Correa Garcia
---

# Import packages and data
# ------------------------
## R Project set up
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Libraries
```{r, eval=FALSE}
#install.packages("pacman")
#BiocManager::install(c('limma', 'DESeq2', 'AnnotationDbi', 'org.Mm.eg.db', 'ReportingTools', 'GO.db', 'GOstats', 'pathview', 'gage', 'gageData', 'select'))
```
## My functions
```{r, eval=FALSE}
source(here::here('code', 'my_functions.R'))
```

```{r, eval=FALSE}
pacman::p_load(data.table, here, tidyverse, gdata, gplots, ggrepel, limma, DESeq2, AnnotationDbi, org.Mm.eg.db, ReportingTools, GO.db, GOstats, pathview, gage)
```

## Data
### counts
```{r}
countData <- vroom(file = here::here('data', 'clean', 'merged_gene_abundance_D8.tsv'), col_names = TRUE)
```

### metadata
```{r}
meta <- read.csv(file = here::here('data', 'clean', 'metaD8.csv'), header = TRUE, sep = ",")
```

# ------------------------
# Clean Data
# ------------------------

## Clean countData names to match metadata
```{r}
countData <- as.data.frame(countData) # As dataframe to reoder in base R
colnames(countData) <- sub(".*_i5_", "", colnames(countData))
colnames(countData) <- sub("^[^.]+\\.", "", colnames(countData))
countData <- countData[,order(colnames(countData))]
names(countData)
```

## Change row names to feature_id
```{r}
row.names(countData) <- countData$feature_id
countData$feature_id <- NULL
```

## Keep only samples present in countData
```{r}
# Get the same rows as columns in countData (not root samples)
meta <- meta[!meta$Compartment == "Roots",]
```

## Recode factors in meta
```{r}
meta$Time <- NULL
meta$Sampling_date <- NULL
meta$SampleID <- NULL
meta$Compartment <- factor(meta$Compartment,
                           levels = c("Sediments", "Rhizosphere"),
                           labels = c("sdmt", "rhizo"))
meta$Sample_type <- factor(meta$Sample_type,
                           levels = c("No_plant", "Carex"),
                           labels = c("unplanted", "carex"))
meta$Water_type <- factor(meta$Water_type,
                          levels = c("Artificial_OSPW", "OSPW"),
                          labels = c("ctl", "ospw"))

meta$treatment <- paste0(meta$Compartment, "_", meta$Sample_type, "_", meta$Water_type)
meta$treatment <- factor(meta$treatment, 
                         levels = c("sdmt_unplanted_ctl", "sdmt_unplanted_ospw", "sdmt_carex_ospw", "rhizo_carex_ospw" ))
meta <- meta[order(meta$alias),]
rownames(meta) <- meta$alias
```

# ------------------------
# Inspect Data
# ------------------------
## Summary
```{r}
summary(countData) 
```
Data is vastly skewed,with 0. values as mean, and in the range of millions as maximum values.

```{r}
par(mar = c(15,5,4,1) + 0.5)
library_size = colSums(countData)
library_size_plot <- barplot(colSums(countData)/1e6, las = 3)
```

```{r}
hist(countData$`25-Mesocosm-1-1-Exp1-D8-Sed`, br = 100)
```

## Log2 transform and visualize
```{r}
logCountData = log2(1 + countData)
hist(logCountData$`25-Mesocosm-1-1-Exp1-D8-Sed`, br = 50)
```

```{r}
#plot(logCountData[,1], logCountData[,2])
```

## Reduce uninformative features
Threashold of 10 (decided somewhat randomly)
```{r}
countData1 <- countData[rowSums(countData) > 10,] # Down from 26M genes to 2 237 972 genes (2.2M)
```

## Check data is in order
```{r}
if (all(row.names(meta) == colnames(countData1))) {
  print("Sanity check ok")
} else {
  print("ERROR: not all row names are the same")
}
```

# ----------
# Create Deseq object
# ----------
## Create the DESeq dataset
```{r}
dds <- DESeqDataSetFromMatrix(countData = countData1,
                              colData = meta, 
                              design = ~ treatment)
```

## Create the DESeq object
```{r}
dds <- DESeq(dds) # Takes 90 minutes approximately
nrow(dds)
```

## Look at size factors
```{r}
sizeFactors(dds)
```

## Apply a regularized log transformation
```{r}
rld <- rlog(dds)
plotPCA(rld, intgroup = "treatment")

```


```{r}
colnames(countData1)

dist2 <- function(x, ...) {
   as.dist(1-cor(t(x), method = 'pearson'))
}
```

```{r}
library(gplots)
hclust2 <- function(x, method = "average", ...){
   hclust(x, method=method, ...)
}
n = 50

x = assay(rld)

if (n > dim(x)[1]) 
   n = dim(x)[1] # maximum as data

x = x[order(apply(x, 1, sd), decreasing=TRUE),] # sort genes by sd

# This will cutoff very large values, which could skew the color
x = as.matrix(x[1:n,]) - apply(x[1:n,], 1, mean)
cutoff = median(unlist(x)) + 4*sd(unlist(x))
x[x > cutoff] <- cutoff
cutoff = median(unlist(x)) - 4*sd(unlist(x))
x[x < cutoff] <- cutoff

groups = meta$treatment
group_colors = rainbow(length(unique(groups)))

   lmat = rbind(c(5,4), c(0,1), c(3,2))
   lwid = c(1.5, 4)
   lhei = c(1,2.4)
   
heatmap.2(x, distfun = dist2, hclustfun = hclust2,
          col = greenred(75), density.info = 'none', scale = 'none', 
          keysize = .5,
          key = TRUE, symkey = FALSE, 
          ColSideColors = group_colors[as.factor(groups)],
          margins = c(8,12),
          cexRow = 1, 
          srtCol = 45, 
          cexCol = 1
)

```

```{r}
resultsNames(dds)
```

```{r}
res = results(dds)
head(res)
summary(res)
```


```{r}
res = results(dds, lfcThreshold = 0.01)
```


```{r}
DESeq2::plotMA(res, ylim=c(-25,25))
```

```{r}
res1 = as.data.frame(res)
res1 = dplyr::mutate(res1, sig = ifelse(res1$padj<0.1, "FDR<0.1", "Not sig."))
res1[which(abs(res1$log2FoldChange)<1.0), "sig"] = "Not sig."
```

## Volcano plot
```{r}
library(ggplot2)
ggplot(res1, aes(log2FoldChange, -log10(padj))) + 
   geom_point(aes(col=sig)) +
   scale_color_manual(values = c("red", "black"))
```

```{r}
res <- res[order(abs(res$log2FoldChange), decreasing = TRUE),]
topGene = rownames(res)[1]
plotCounts(dds, gene = topGene, intgroup = "treatment")
```

Now, you can load the annotation table and scan it for the gene info related to the significant genes saved. 

then, you can move to gene ontology

```{r}
library(GO.db)
library(GOstats)
```

### Subset table above
```{r}
res_05 <- as.data.frame(subset(res, padj<0.5))
sig_lfc <- 4 
```

